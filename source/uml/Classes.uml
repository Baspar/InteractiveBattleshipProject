@startuml
!include skin.uml
!include liaisons.uml
class ActionChangementCarte{
     -Carte* carte
     -Coordonnees coordonnees
     +virtual void lancerAction()
}
class ActionCombat{
     -Personnage* joueurAdverse
     +virtual void lancerAction()
}
class Action{
     +virtual void lancerAction()
     -string texteInteraction
     -bool active
}
class Arme{
     +void tirer(Coordonnees coordonnees)
     -string nomArme
}
class AutreAction{
     +virtual void lancerAction()
}
class BatailleNavale{
     +BatailleNavale(PersonnageBN joueur1, PersonnageBN joueur2)
     +void jouer(Coordonnees coordonnees)
     -void changerJoueur()
     -int joueurCourant
     -vector<PersonnageBN*> joueurs
     -vector<Grille> grilles
}
class Bateau{
     +bool estCoule()
     +void retirerPV()
     -int PV
     -bool coule
     -int taille
}
class Carte{
     +void deplacerPersonnage(Personnage* personnage, Coordonnees coordonnees)
     -int id
     -TailleGrille tailleGrille
     -vector<vector<Cellule>  > cellules
}
class Case{
     +void tirerDessus()
     +Case()
     -bool touche
     -Bateau* bateau
}
class CelluleAccessible{
     -Personnage* occupant
     +virtual bool estAccessible()
}
class CelluleCombat{
     -Personnage* combattant
}
class Cellule{
     -Action* action
     +void lancerAction()
     +virtual bool estAccessible()
}
class CelluleObstacle{
     -string nomObstacle
     +virtual bool estAccessible()
}
class Combat{
     +Personnage retournerGagnant()
     +Combat(Personnage joueur1, Personnage joueur2)
     -Personnage* personnage1
     -Personnage* personnage2
}
class Controleur{
     +void tourDeJeu()
     +void lancerJeu()
     +void actionBatailleNavale()
     +void tourDeJeuBatailleNavale()
     -IHMJeu* ihmJeu
     -IHMBN* ihmBN
}
class Coordonnees{
     +Coordonnees(int abs, int ord)
     -int abscisse
     -int ordonnee
}
class Grille{
     +Grille(int longueur, int hauteur)
     -TailleGrille tailleGrille
     -vector<vector<Case>  > cases
}
class IHMBN{
     +IHMBN(BatailleNavale batailleNavale)
     +void afficherJeu()
     +Coordonnees saisieCoup()
     +Grille saisirPlacementBateaux()
     -void afficherGrilleRadar()
     -void afficherGrilleBateau()
     -BatailleNavale* batailleNavale
}
class IHMJeu{
     +IHMJeu(Jeu jeu)
     +Coordonnees saisieDeplacement()
     +void afficherJeu()
     +void afficherSaisie()
     -void afficherInteraction()
     -void afficherCarteCourante()
     -Jeu* jeu
}
class Jeu{
     +void initialiserJeu()
     +bool partieFinie()
     +void jouer(Coordonnees coordonnees)
     -Action actionEnCours
     -vector<PersonnageNonJouable*> personnagesNonJouables
     -PersonnageJouable* personnageJouable
     -Monde monde
     -Combat combat
}
class JoueurHumain{
}
class JoueurIA{
}
class Monde{
     +void placerJoueurs()
     -vector<Carte> cartes
}
class PersonnageBN{
     +Grille placerBateaux()
     +Coordonnees caseAViser()
     -TailleGrille tailleGrille
     -string nom
     -Arme* arme
     -vector<Bateau*> bateaux
}
class PersonnageBNHumain{
}
class PersonnageBNIA{
}
class Personnage{
     +void deplacer(Coordonnees coordonnees, Carte* carte)
     -Carte* carte
     -Coordonnees coord
     -string nom
}
class PersonnageJouable{
}
class PersonnageNonJouable{
}
class TailleGrille{
     +TailleGrille(int lon, int hau)
     -int longueur
     -int hauteur
}
@enduml
